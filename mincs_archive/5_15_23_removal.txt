   def open_graph_window(self):
        self.graph_window = tk.Toplevel(self.realtime_data_tab)
        self.graph_window.wm_title("minCS Sensor Graphs")

        # Use a style with a darker background
        plt.style.use('dark_background')

        # Create 3 subplots
        self.fig, (self.ax1, self.ax2, self.ax3) = plt.subplots(3, 1, sharex=True)
        self.fig.subplots_adjust(hspace=0.5)
        self.fig.suptitle('minCS Sensor Data', fontsize=10, color='white', fontweight='bold')

        # Set titles and fonts
        self.ax1.set_title('Pressure', fontsize=9, color='white')
        self.ax2.set_title('Load', fontsize=9, color='white')
        self.ax3.set_title('Temperature', fontsize=9, color='white')

        # Create empty lines with different colors
        self.line1 = [self.ax1.plot([], [], color=color)[0] for color in ['red', 'green', 'magenta', 'yellow']]
        self.line2 = [self.ax2.plot([], [], color=color)[0] for color in ['red', 'green']]
        self.line3, = self.ax3.plot([], [], color='red')

        # Initialize data
        self.pressure_data = [[] for _ in range(4)]
        self.load_data = [[] for _ in range(2)]
        self.temperature_data = []

        # Set the canvas
        self.canvas = FigureCanvasTkAgg(self.fig, master=self.graph_window)  
        self.canvas.draw()
        self.canvas.get_tk_widget().pack(side=tk.TOP, fill=tk.BOTH, expand=1)

        # Start the animation with save_count
        self.ani = animation.FuncAnimation(self.fig, self.update_graph, interval=1000, save_count=1000) # 0.1 second update rate

    def update_graph(self, i):
        # Append the new data to the lists
        for i in range(4):
            self.pressure_data[i].append(self.get_pressure_data(i))
        for i in range(2):
            self.load_data[i].append(self.get_load_data(i))
        self.temperature_data.append(self.get_temperature_data())

        # Convert the data to pandas Series
        pressure_series = [pd.Series(data) for data in self.pressure_data]
        load_series = [pd.Series(data) for data in self.load_data]
        temperature_series = pd.Series(self.temperature_data)

        # Calculate the moving averages with a window size of 5
        pressure_smooth = [series.rolling(window=5).mean().tolist() for series in pressure_series]
        load_smooth = [series.rolling(window=5).mean().tolist() for series in load_series]
        temperature_smooth = temperature_series.rolling(window=5).mean().tolist()

        # Set the new data
        for i, line in enumerate(self.line1):
            line.set_data(range(len(pressure_smooth[i])), pressure_smooth[i])
        for i, line in enumerate(self.line2):
            line.set_data(range(len(load_smooth[i])), load_smooth[i])
        self.line3.set_data(range(len(temperature_smooth)), temperature_smooth)

        # Adjust the plot limits
        self.ax1.set_xlim(0, len(self.pressure_data[0]))
        self.ax2.set_xlim(0, len(self.load_data[0]))
        self.ax3.set_xlim(0, len(self.temperature_data))

        max_pressure = max(max(data) if data else 1 for data in self.pressure_data)
        if max_pressure > self.ax1.get_ylim()[1]:
            self.ax1.set_ylim(0, max_pressure)

        max_load = max(max(data) if data else 1 for data in self.load_data)
        if max_load > self.ax2.get_ylim()[1]:
            self.ax2.set_ylim(0, max_load)

        max_temp = max(self.temperature_data) if self.temperature_data else 1
        if max_temp > self.ax3.get_ylim()[1]:
            self.ax3.set_ylim(0, max_temp)

        # Draw the new data
        self.fig.canvas.draw()

        # Update the x-axis to integer values
        self.ax1.xaxis.set_major_locator(MaxNLocator(integer=True))
        self.ax2.xaxis.set_major_locator(MaxNLocator(integer=True))
        self.ax3.xaxis.set_major_locator(MaxNLocator(integer=True))

        # Set the color and width of the spines (borders)
        for ax in [self.ax1, self.ax2, self.ax3]:
            for spine in ax.spines.values():
                spine.set_edgecolor('white')
                spine.set_linewidth(2)

            # Set the color of the labels
            ax.xaxis.label.set_color('white')
            ax.yaxis.label.set_color('white')

            # Set the color of the tick labels
            ax.tick_params(colors='white')

            # Set the color and width of the grid
            ax.grid(color='white', linewidth=0.5)

        # Add a legend to each subplot
        self.ax1.legend(["Pressure Sensor [1]", "Pressure Sensor [2]", "Pressure Sensor [3]", "Pressure Sensor [4]"], loc="upper left", fontsize=8, frameon=True, shadow=True)
        self.ax2.legend(["Load Sensor [1]", "Load Sensor [2]"], loc="upper left", fontsize=8, frameon=True, shadow=True)
        self.ax3.legend(["Temperature Sensor"], loc="upper left", fontsize=8, frameon=True, shadow=True)

        # Set the axis labels
        self.ax1.set_ylabel('Pressure(psi)', fontsize=8, color='white')
        self.ax2.set_ylabel('Load (lbs)', fontsize=8, color='white')
        self.ax3.set_xlabel('Time (s)', fontsize=8, color='white')
        self.ax3.set_ylabel('Temperature (CÂ°)', fontsize=8, color='white')
		
		
		
	open_graph_button = ttk.Button(self.realtime_data_tab, text="Open minCS Graph", command=self.open_graph_window)
    open_graph_button.place(relx=0.5, rely=1.0, anchor=tk.S, y=-10)  # Place the button in the center bottom with negative y-offset